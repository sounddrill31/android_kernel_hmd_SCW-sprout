/************************************************************                            $
*
* file: p9415_wireless_power.h 
*
* Description: AP to flash 9221-P OTP firmware included file
*
*------------------------------------------------------------
* Integrated Device Technology Proprietary and Confidential
* Copyright (c) 2018, Integrated Device Technology Co., Ltd.
* All Rights Reserved
*************************************************************/

#ifndef __IDTP9415_H__
#define __IDTP9415_H__

// RX -> TX
#define PROPRIETARY18        0x18
#define PROPRIETARY28        0x28
#define PROPRIETARY38        0x38
#define PROPRIETARY48        0x48
#define PROPRIETARY58        0x58

// bits mask
#define BIT0                 0x01
#define BIT1                 0x02
#define BIT2                 0x04
#define BIT3                 0x08
#define BIT4                 0x10
#define BIT5                 0x20
#define BIT6                 0x40
#define BIT7                 0x80

/* status low regiter bits define */
#define STATUS_VOUT_ON       BIT7
#define STATUS_VOUT_OFF      BIT6
#define STATUS_OV_TEMP       BIT2
#define STATUS_OV_VOL        BIT1
#define STATUS_OV_CURR       BIT0

// bitmap for status flags
// 1: indicates a pending interrupt for LDO Vout state change – from OFF to ON
#define VOUTCHANGED          BIT7 // Stat_Vout_ON
// 1: indicates a pending interrupt for TX Data Received. (Change from “No Received Data” state to “Data Received” state)
#define TXDATARCVD           BIT4 // TX Data Received

/* used registers define */
#define REG_CHIP_ID          0x5870
#define REG_CHIP_REV         0x001c
#define REG_STATUS           0x0034
#define REG_INTR             0x0036
#define REG_INTR_EN          0x0038
#define REG_CHG_STATUS       0x003A
#define REG_ADC_VOUT         0x003C
#define REG_VOUT_SET         0x003E
#define REG_VRECT_ADJ        0x003F
#define REG_RX_LOUT          0x0044
#define REG_ILIM_SET         0x004A
#define REG_COMMAND          0x004E
#define REG_PROPPKT_ADDR     0x0050 // Proprietary Packet Header Register, PPP_Header (0x50)
#define REG_PPPDATA_ADDR     0x0051 // PPP Data Value Register(0X51, 0x52, 0x53, 0x54, 0x55)
#define REG_INT_CLEAR        0x0056
#define REG_BCHEADER_ADDR    0x0058 // Back Channel Packet Register (0x58)
#define REG_BCDATA_ADDR      0x0059 // Back Channel Packet Register (0x59, 0x5A, 0x5B, 0x5C)
#define REG_FC_VOLTAGE       0x0078

// bitmap for SSCmnd register 0x4e
#define VSWITCH              BIT7
// If AP sets this bit to "1" then IDTP9415 M0 clears the interrupt corresponding to the bit(s) which has a value of “1”
#define CLRINT               BIT5
// If AP sets this bit to "1" then IDTP9415 M0 toggles LDO output once (from on to off, or from off to on), and then sets this bit to “0”
#define LDOTGL               BIT1
// If AP sets this bit to “1” then IDTP9415 M0 sends the Proprietary Packet
#define SENDPROPP            BIT0

// bitmap for customer command
#define BC_NONE              0x00
#define BC_SET_FREQ          0x03
#define BC_GET_FREQ          0x04
#define BC_READ_FW_VER       0x05
#define BC_READ_Iin          0x06
#define BC_READ_Vin          0x07
#define BC_SET_Vin           0x0a
#define BC_ADAPTER_TYPE      0x0b
#define BC_RESET             0x0c
#define BC_READ_I2C          0x0d
#define BC_WRITE_I2C         0x0e
#define BC_VI2C_INIT         0x10

// Adapter Type
typedef enum {
    ADAPTER_QC20           = 0x05,
    ADAPTER_QC30           = 0x06,
} Adapter_list;

typedef struct {           // write to structure at SRAM address 0x0400
    u16 status;            // Read/Write by both 9415 and 9415 host
    u16 startAddr;         // OTP image address of the current packet
    u16 codeLength;        // The size of the OTP image data in the current packet
    u16 dataChksum;        // Checksum of the current packet
    u8  dataBuf[128];      // OTP image data of the current packet
} IDTP9415PgmType;

// proprietary packet type
typedef struct {
    u8 header;             // The header consists of a single byte that indicates the Packet type.
    u8 cmd;                // Back channel command
    u8 msg[5];             // Send data buffer
} ProPkt_Type;

static char bootloader[] = {
    0x00, 0x04, 0x00, 0x20, 0x35, 0x01, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFE, 0xE7, 0x00, 0x00, 0x80, 0x00, 0x00, 0xE0, 0x00, 0xBF, 0x40, 0x1E, 0xFC, 0xD2, 0x70, 0x47,
    0x00, 0xB5, 0x60, 0x4A, 0x60, 0x4B, 0x01, 0x70, 0x01, 0x20, 0xFF, 0xF7, 0xF3, 0xFF, 0x52, 0x1E,
    0x02, 0xD0, 0x18, 0x8B, 0x00, 0x06, 0xF7, 0xD4, 0x00, 0xBD, 0xF7, 0xB5, 0x05, 0x46, 0x5B, 0x48,
    0x81, 0xB0, 0x00, 0x21, 0x94, 0x46, 0x81, 0x81, 0x57, 0x48, 0x31, 0x21, 0x01, 0x80, 0x04, 0x21,
    0x81, 0x80, 0x06, 0x21, 0x01, 0x82, 0x28, 0x20, 0xFF, 0xF7, 0xDC, 0xFF, 0x00, 0x24, 0x0D, 0xE0,
    0x02, 0x99, 0x28, 0x5D, 0x09, 0x5D, 0x02, 0x46, 0x8A, 0x43, 0x01, 0xD0, 0x10, 0x20, 0x3F, 0xE0,
    0x81, 0x43, 0x02, 0xD0, 0x28, 0x19, 0xFF, 0xF7, 0xD3, 0xFF, 0x64, 0x1C, 0x64, 0x45, 0xEF, 0xD3,
    0x49, 0x48, 0x36, 0x21, 0x01, 0x82, 0x00, 0x24, 0x2F, 0xE0, 0x02, 0x98, 0x00, 0x27, 0x06, 0x5D,
    0x28, 0x19, 0x00, 0x90, 0x44, 0x4A, 0x08, 0x20, 0x90, 0x80, 0x02, 0x20, 0xFF, 0xF7, 0xBA, 0xFF,
    0x28, 0x5D, 0x33, 0x46, 0x83, 0x43, 0x16, 0xD0, 0x3F, 0x49, 0x04, 0x20, 0x88, 0x80, 0x02, 0x20,
    0xFF, 0xF7, 0xB0, 0xFF, 0x19, 0x46, 0x00, 0x98, 0xFF, 0xF7, 0xB2, 0xFF, 0x3A, 0x49, 0x0F, 0x20,
    0x88, 0x80, 0x02, 0x20, 0xFF, 0xF7, 0xA6, 0xFF, 0x28, 0x5D, 0xB0, 0x42, 0x03, 0xD0, 0x7F, 0x1C,
    0x0A, 0x2F, 0xDF, 0xD3, 0x01, 0xE0, 0x0A, 0x2F, 0x06, 0xD3, 0x35, 0x48, 0x29, 0x19, 0x41, 0x80,
    0x29, 0x5D, 0xC1, 0x80, 0x04, 0x20, 0x03, 0xE0, 0x64, 0x1C, 0x64, 0x45, 0xCD, 0xD3, 0x02, 0x20,
    0x2D, 0x49, 0x11, 0x22, 0x0A, 0x80, 0x04, 0x22, 0x8A, 0x80, 0x2C, 0x49, 0xFF, 0x22, 0x8A, 0x81,
    0x04, 0xB0, 0xF0, 0xBD, 0x2C, 0x49, 0x2B, 0x48, 0x08, 0x60, 0x2C, 0x48, 0x00, 0x23, 0x83, 0x81,
    0x2A, 0x49, 0x20, 0x39, 0x8B, 0x83, 0x03, 0x80, 0x24, 0x48, 0x5A, 0x21, 0x40, 0x38, 0x01, 0x80,
    0x81, 0x15, 0x81, 0x80, 0x0B, 0x21, 0x01, 0x81, 0x25, 0x49, 0x81, 0x81, 0x14, 0x20, 0xFF, 0xF7,
    0x71, 0xFF, 0x24, 0x4A, 0x01, 0x20, 0x10, 0x80, 0x02, 0x20, 0xFF, 0xF7, 0x6B, 0xFF, 0x8D, 0x20,
    0x10, 0x80, 0x93, 0x80, 0xFF, 0x20, 0x90, 0x82, 0x03, 0x20, 0x00, 0x02, 0x10, 0x82, 0xFC, 0x20,
    0x90, 0x83, 0x1C, 0x49, 0x95, 0x20, 0x20, 0x31, 0x08, 0x80, 0x15, 0x4D, 0x2B, 0x80, 0x28, 0x88,
    0x2C, 0x46, 0x01, 0x28, 0xFB, 0xD1, 0x61, 0x88, 0x80, 0x03, 0xA2, 0x88, 0x08, 0x18, 0x51, 0x18,
    0x8B, 0xB2, 0x00, 0x21, 0x04, 0xE0, 0x0E, 0x19, 0x36, 0x7A, 0xF3, 0x18, 0x9B, 0xB2, 0x49, 0x1C,
    0x8A, 0x42, 0xF8, 0xD8, 0xE1, 0x88, 0x99, 0x42, 0x01, 0xD0, 0x08, 0x20, 0x08, 0xE0, 0x00, 0x2A,
    0x05, 0xD0, 0x07, 0x49, 0x08, 0x31, 0xFF, 0xF7, 0x50, 0xFF, 0x20, 0x80, 0xDF, 0xE7, 0x02, 0x20,
    0x28, 0x80, 0xDC, 0xE7, 0x10, 0x27, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x40, 0x40, 0x30, 0x00, 0x40,
    0x00, 0x04, 0x00, 0x20, 0xFF, 0x0F, 0x00, 0x00, 0x80, 0xE1, 0x00, 0xE0, 0x20, 0x6C, 0x00, 0x40,
    0x04, 0x1D, 0x00, 0x00, 0x00, 0x64, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

unsigned char idtp9415_rx_fw[] = { /// 0x00

};

#endif
